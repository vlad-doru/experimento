syntax = "proto3";

package data;

// Info holds general information about the experiment.
message ExperimentInfo {
	string id = 1;
	string seed_value = 2;
	double size = 3;
	int64 started = 4;
}

// GroupDescription specifies the size of the group and the value for the experiment variables.
message GroupInfo {
	double initial_size = 1;
	map<string, string> variables = 2;
}

message VariableInfo {
	repeated string options = 1;
}

message Experiment {
	ExperimentInfo info = 1;
	map<string, VariableInfo> variables_info = 2;
	map<string, GroupInfo> groups_info = 3;

	map<string, string> whitelist = 4;

	// Fields that are populated by the sistem.
	uint64 internal_seed = 5;
	uint64 seed = 6;
	repeated string sorted_group_ids = 7;
}

message Response {
	bool ok = 1;
	string error = 2;
}

/************ REPOSITORY **********/

message Void {}

message Experiments {
	map<string, Experiment> experiments = 1;
}

service Repository {
  rpc SaveExperiment (Experiment) returns(Response);
	rpc DropExperiment (ExperimentInfo) returns(Response);
	rpc GetExperiments (Void) returns (Experiments);
	rpc GetExperiment  (ExperimentInfo) returns(Experiment);
}


/************ STORE ***************/

message StoreMessage {
	string experiment_id = 1;
	string entity_id = 2;
	string group_id = 3;
}


service Store {
	rpc SetExperimentGroup (StoreMessage) returns(Response);
	rpc GetExperimentGroup (StoreMessage) returns(StoreMessage);
}

/************ EXPERIMENTO ********/

message QueryAll {
	string entity_id = 1;
}

message QueryExperiment {
	string entity_id = 1;
	ExperimentInfo info = 2;
}

message Variables {
	map<string, string> variable_values = 1;
}

message AllVariables {
	map<string, Variables> exp_variables = 1;
}

service Experimento {
	rpc GetAllVariables(QueryAll) returns (AllVariables);
	rpc GetVariables(QueryExperiment) returns (Variables);
}
