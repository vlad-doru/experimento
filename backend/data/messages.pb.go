// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package data is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	ExperimentInfo
	GroupInfo
	VariableInfo
	Experiment
	Experiments
	StoreMessage
	Response
	Void
*/
package data

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Info holds general information about the experiment.
type ExperimentInfo struct {
	Id        string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SeedValue string  `protobuf:"bytes,2,opt,name=seed_value,json=seedValue" json:"seed_value,omitempty"`
	Size      float64 `protobuf:"fixed64,3,opt,name=size" json:"size,omitempty"`
	Started   int64   `protobuf:"varint,4,opt,name=started" json:"started,omitempty"`
}

func (m *ExperimentInfo) Reset()                    { *m = ExperimentInfo{} }
func (m *ExperimentInfo) String() string            { return proto.CompactTextString(m) }
func (*ExperimentInfo) ProtoMessage()               {}
func (*ExperimentInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// GroupDescription specifies the size of the group and the value for the experiment variables.
type GroupInfo struct {
	InitialSize float64           `protobuf:"fixed64,1,opt,name=initial_size,json=initialSize" json:"initial_size,omitempty"`
	Variables   map[string]string `protobuf:"bytes,2,rep,name=variables" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GroupInfo) Reset()                    { *m = GroupInfo{} }
func (m *GroupInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()               {}
func (*GroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GroupInfo) GetVariables() map[string]string {
	if m != nil {
		return m.Variables
	}
	return nil
}

type VariableInfo struct {
	Options []string `protobuf:"bytes,1,rep,name=options" json:"options,omitempty"`
}

func (m *VariableInfo) Reset()                    { *m = VariableInfo{} }
func (m *VariableInfo) String() string            { return proto.CompactTextString(m) }
func (*VariableInfo) ProtoMessage()               {}
func (*VariableInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Experiment struct {
	Info          *ExperimentInfo          `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	VariablesInfo map[string]*VariableInfo `protobuf:"bytes,2,rep,name=variables_info,json=variablesInfo" json:"variables_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	GroupsInfo    map[string]*GroupInfo    `protobuf:"bytes,3,rep,name=groups_info,json=groupsInfo" json:"groups_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Whitelist     map[string]string        `protobuf:"bytes,4,rep,name=whitelist" json:"whitelist,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Fields that are populated by the sistem.
	InternalSeed   uint64   `protobuf:"varint,5,opt,name=internal_seed,json=internalSeed" json:"internal_seed,omitempty"`
	Seed           uint64   `protobuf:"varint,6,opt,name=seed" json:"seed,omitempty"`
	SortedGroupIds []string `protobuf:"bytes,7,rep,name=sorted_group_ids,json=sortedGroupIds" json:"sorted_group_ids,omitempty"`
}

func (m *Experiment) Reset()                    { *m = Experiment{} }
func (m *Experiment) String() string            { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()               {}
func (*Experiment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Experiment) GetInfo() *ExperimentInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Experiment) GetVariablesInfo() map[string]*VariableInfo {
	if m != nil {
		return m.VariablesInfo
	}
	return nil
}

func (m *Experiment) GetGroupsInfo() map[string]*GroupInfo {
	if m != nil {
		return m.GroupsInfo
	}
	return nil
}

func (m *Experiment) GetWhitelist() map[string]string {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

type Experiments struct {
	Experiments map[string]*Experiment `protobuf:"bytes,1,rep,name=experiments" json:"experiments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Experiments) Reset()                    { *m = Experiments{} }
func (m *Experiments) String() string            { return proto.CompactTextString(m) }
func (*Experiments) ProtoMessage()               {}
func (*Experiments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Experiments) GetExperiments() map[string]*Experiment {
	if m != nil {
		return m.Experiments
	}
	return nil
}

type StoreMessage struct {
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty"`
	EntityId     string `protobuf:"bytes,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	GroupId      string `protobuf:"bytes,3,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *StoreMessage) Reset()                    { *m = StoreMessage{} }
func (m *StoreMessage) String() string            { return proto.CompactTextString(m) }
func (*StoreMessage) ProtoMessage()               {}
func (*StoreMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Response struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*ExperimentInfo)(nil), "data.ExperimentInfo")
	proto.RegisterType((*GroupInfo)(nil), "data.GroupInfo")
	proto.RegisterType((*VariableInfo)(nil), "data.VariableInfo")
	proto.RegisterType((*Experiment)(nil), "data.Experiment")
	proto.RegisterType((*Experiments)(nil), "data.Experiments")
	proto.RegisterType((*StoreMessage)(nil), "data.StoreMessage")
	proto.RegisterType((*Response)(nil), "data.Response")
	proto.RegisterType((*Void)(nil), "data.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Repository service

type RepositoryClient interface {
	SaveExperiment(ctx context.Context, in *Experiment, opts ...grpc.CallOption) (*Response, error)
	DropExperiment(ctx context.Context, in *ExperimentInfo, opts ...grpc.CallOption) (*Response, error)
	GetExperiments(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Experiments, error)
}

type repositoryClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryClient(cc *grpc.ClientConn) RepositoryClient {
	return &repositoryClient{cc}
}

func (c *repositoryClient) SaveExperiment(ctx context.Context, in *Experiment, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/data.Repository/SaveExperiment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) DropExperiment(ctx context.Context, in *ExperimentInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/data.Repository/DropExperiment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetExperiments(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Experiments, error) {
	out := new(Experiments)
	err := grpc.Invoke(ctx, "/data.Repository/GetExperiments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Repository service

type RepositoryServer interface {
	SaveExperiment(context.Context, *Experiment) (*Response, error)
	DropExperiment(context.Context, *ExperimentInfo) (*Response, error)
	GetExperiments(context.Context, *Void) (*Experiments, error)
}

func RegisterRepositoryServer(s *grpc.Server, srv RepositoryServer) {
	s.RegisterService(&_Repository_serviceDesc, srv)
}

func _Repository_SaveExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Experiment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).SaveExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Repository/SaveExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).SaveExperiment(ctx, req.(*Experiment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_DropExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).DropExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Repository/DropExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).DropExperiment(ctx, req.(*ExperimentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Repository/GetExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetExperiments(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Repository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.Repository",
	HandlerType: (*RepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveExperiment",
			Handler:    _Repository_SaveExperiment_Handler,
		},
		{
			MethodName: "DropExperiment",
			Handler:    _Repository_DropExperiment_Handler,
		},
		{
			MethodName: "GetExperiments",
			Handler:    _Repository_GetExperiments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for Store service

type StoreClient interface {
	SetExperimentGroup(ctx context.Context, in *StoreMessage, opts ...grpc.CallOption) (*Response, error)
	GetExperimentGroup(ctx context.Context, in *StoreMessage, opts ...grpc.CallOption) (*StoreMessage, error)
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) SetExperimentGroup(ctx context.Context, in *StoreMessage, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/data.Store/SetExperimentGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetExperimentGroup(ctx context.Context, in *StoreMessage, opts ...grpc.CallOption) (*StoreMessage, error) {
	out := new(StoreMessage)
	err := grpc.Invoke(ctx, "/data.Store/GetExperimentGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreServer interface {
	SetExperimentGroup(context.Context, *StoreMessage) (*Response, error)
	GetExperimentGroup(context.Context, *StoreMessage) (*StoreMessage, error)
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

func _Store_SetExperimentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).SetExperimentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Store/SetExperimentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).SetExperimentGroup(ctx, req.(*StoreMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetExperimentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetExperimentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Store/GetExperimentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetExperimentGroup(ctx, req.(*StoreMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetExperimentGroup",
			Handler:    _Store_SetExperimentGroup_Handler,
		},
		{
			MethodName: "GetExperimentGroup",
			Handler:    _Store_GetExperimentGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0x1b, 0xb7, 0x4d, 0xae, 0x53, 0x37, 0xdf, 0xa8, 0x0b, 0x7f, 0x41, 0x40, 0x71, 0x05,
	0xca, 0x2a, 0x20, 0x23, 0xa1, 0x0a, 0x95, 0x05, 0x52, 0xab, 0xaa, 0x48, 0x20, 0xe4, 0xa0, 0xb2,
	0xb4, 0x5c, 0x79, 0x08, 0xa3, 0x26, 0x1e, 0x6b, 0x66, 0x1a, 0x08, 0x1b, 0x9e, 0x86, 0x05, 0xbc,
	0x0a, 0x2f, 0xc5, 0xfc, 0xf8, 0x67, 0x62, 0x67, 0x01, 0xbb, 0x99, 0x33, 0x73, 0xcf, 0xbd, 0xf7,
	0x9c, 0xeb, 0x31, 0xf8, 0x4b, 0xcc, 0x79, 0x3a, 0xc7, 0x7c, 0x5a, 0x30, 0x2a, 0x28, 0x72, 0xb3,
	0x54, 0xa4, 0xe1, 0x12, 0xfc, 0x8b, 0xaf, 0x05, 0x66, 0x64, 0x89, 0x73, 0x71, 0x95, 0x7f, 0xa2,
	0xc8, 0x87, 0x1d, 0x92, 0x05, 0xce, 0xb1, 0x33, 0x19, 0xc4, 0x72, 0x85, 0xee, 0x03, 0x70, 0x8c,
	0xb3, 0x64, 0x95, 0x2e, 0xee, 0x70, 0xb0, 0xa3, 0xf1, 0x81, 0x42, 0xae, 0x15, 0x80, 0x10, 0xb8,
	0x9c, 0x7c, 0xc3, 0x41, 0x4f, 0x1e, 0x38, 0xb1, 0x5e, 0xa3, 0x00, 0xf6, 0xb9, 0x48, 0x99, 0xc0,
	0x59, 0xe0, 0x4a, 0xb8, 0x17, 0x57, 0xdb, 0xf0, 0x97, 0x03, 0x83, 0x4b, 0x46, 0xef, 0x0a, 0x9d,
	0xea, 0x11, 0x0c, 0x49, 0x4e, 0x04, 0x49, 0x17, 0x89, 0xe6, 0x70, 0x34, 0x87, 0x57, 0x62, 0x33,
	0x45, 0x75, 0x06, 0x83, 0x55, 0xca, 0x48, 0x7a, 0xb3, 0xc0, 0x5c, 0x26, 0xef, 0x4d, 0xbc, 0xe8,
	0xc1, 0x54, 0x55, 0x3e, 0xad, 0x69, 0xa6, 0xd7, 0xd5, 0x85, 0x8b, 0x5c, 0xb0, 0x75, 0xdc, 0x04,
	0x8c, 0xcf, 0xc0, 0xdf, 0x3c, 0x44, 0x23, 0xe8, 0xdd, 0xe2, 0x75, 0xd9, 0x9e, 0x5a, 0xa2, 0x23,
	0xd8, 0xb5, 0x5b, 0x33, 0x9b, 0x97, 0x3b, 0xa7, 0x4e, 0x38, 0x81, 0x61, 0x15, 0xad, 0xcb, 0x95,
	0x6d, 0xd1, 0x42, 0x10, 0x9a, 0x73, 0x19, 0xdf, 0x93, 0x77, 0xab, 0x6d, 0xf8, 0xdb, 0x05, 0x68,
	0x64, 0x44, 0x13, 0x70, 0x89, 0x0c, 0xd0, 0x59, 0xbc, 0xe8, 0xc8, 0xd4, 0xbb, 0x29, 0x73, 0xac,
	0x6f, 0xa0, 0x37, 0xe0, 0xd7, 0xd5, 0x26, 0x3a, 0xc6, 0xf4, 0x78, 0xd2, 0x8e, 0x69, 0x9a, 0x54,
	0xd1, 0xa6, 0xd1, 0x83, 0x95, 0x8d, 0xa1, 0xd7, 0xe0, 0xcd, 0x95, 0x26, 0x25, 0x51, 0x4f, 0x13,
	0x1d, 0x77, 0x88, 0xb4, 0x6e, 0x16, 0x0b, 0xcc, 0x6b, 0x00, 0xbd, 0x82, 0xc1, 0x97, 0xcf, 0x44,
	0xe0, 0x05, 0xe1, 0x42, 0x5a, 0xa7, 0x08, 0x1e, 0x76, 0x08, 0x3e, 0x56, 0x37, 0x4a, 0xb9, 0xeb,
	0x08, 0x74, 0x02, 0x07, 0x24, 0x17, 0x98, 0xe5, 0xca, 0x50, 0x39, 0x21, 0xc1, 0xae, 0x14, 0xc0,
	0x8d, 0x87, 0x15, 0x38, 0x93, 0x98, 0x1e, 0x18, 0x75, 0xb6, 0xa7, 0xcf, 0xf4, 0x5a, 0x0a, 0x36,
	0xe2, 0x54, 0x0d, 0x48, 0xa2, 0x8b, 0x49, 0x48, 0xc6, 0x83, 0x7d, 0x2d, 0xb1, 0x6f, 0x70, 0x63,
	0x76, 0xc6, 0xc7, 0x1f, 0x00, 0x75, 0x95, 0xd8, 0xe2, 0xea, 0xc4, 0x76, 0xd5, 0x8b, 0x90, 0xe9,
	0xc2, 0xb6, 0xd3, 0x72, 0x7a, 0xfc, 0x0e, 0x0e, 0x5b, 0xb2, 0x6c, 0xa1, 0x7c, 0xbc, 0x49, 0x79,
	0xd8, 0x1a, 0x43, 0x9b, 0x4f, 0xce, 0xdd, 0xa6, 0x4a, 0xff, 0x34, 0x77, 0x3f, 0x1c, 0xf0, 0x1a,
	0xbd, 0x39, 0x3a, 0x07, 0x0f, 0x37, 0x5b, 0x3d, 0x7b, 0x5e, 0x14, 0xb6, 0x7d, 0xe1, 0xf6, 0xda,
	0x58, 0x63, 0x87, 0x8d, 0xdf, 0xc3, 0xa8, 0x7d, 0x61, 0x4b, 0x55, 0x4f, 0x36, 0x9b, 0x1c, 0xb5,
	0xb3, 0xd8, 0x75, 0xde, 0xc2, 0x70, 0x26, 0x28, 0xc3, 0x6f, 0xcd, 0xc3, 0xa2, 0xec, 0x6f, 0x12,
	0x26, 0xf5, 0x23, 0x32, 0x6c, 0xc0, 0xab, 0x0c, 0xdd, 0x83, 0x81, 0x5c, 0x10, 0xb1, 0x56, 0x17,
	0x4c, 0xeb, 0x7d, 0x03, 0xc8, 0xc3, 0xff, 0xa1, 0x5f, 0x0d, 0x80, 0x7e, 0x50, 0xe4, 0x27, 0x36,
	0x37, 0xce, 0x87, 0xcf, 0xa0, 0x1f, 0x63, 0x5e, 0xc8, 0xaf, 0x0d, 0xab, 0x27, 0x8a, 0xde, 0x6a,
	0xf6, 0x7e, 0x2c, 0x57, 0x4a, 0x4a, 0xcc, 0x18, 0x65, 0x95, 0x94, 0x7a, 0x13, 0xee, 0x81, 0x7b,
	0x4d, 0x49, 0x16, 0xfd, 0x74, 0x00, 0x62, 0x5c, 0x50, 0x4e, 0x64, 0xb1, 0x6b, 0x14, 0x81, 0x3f,
	0x4b, 0x57, 0xd8, 0xfa, 0x5c, 0x3b, 0x4d, 0x8e, 0x7d, 0x83, 0xd4, 0x09, 0x5f, 0x80, 0x7f, 0xce,
	0x68, 0x61, 0xc5, 0x6c, 0xfd, 0xa8, 0x3b, 0x71, 0x4f, 0xc1, 0xbf, 0xc4, 0xc2, 0xf6, 0x12, 0xca,
	0x41, 0x94, 0x85, 0x8d, 0xff, 0xeb, 0x58, 0x18, 0x7d, 0x87, 0x5d, 0x2d, 0x29, 0x3a, 0x05, 0x34,
	0xb3, 0x23, 0xf5, 0x98, 0xa1, 0x72, 0x8c, 0x6d, 0xd5, 0x3b, 0x39, 0xcf, 0x00, 0x5d, 0xfe, 0x5d,
	0xe4, 0x16, 0xec, 0x66, 0x4f, 0xff, 0x1c, 0x9e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x3c,
	0xa0, 0x03, 0x2e, 0x06, 0x00, 0x00,
}
